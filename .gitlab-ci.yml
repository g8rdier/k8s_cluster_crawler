collect_data:
  stage: build
  image: registry.cloud.fits/devops-services/toolchain/docker-go:v0.6.0
  timeout: 60m
  variables:
    GIT_SSL_NO_VERIFY: "true"
  script:
    - echo "Displaying OS information"
    - cat /etc/os-release || lsb_release -a || uname -a

    - echo "Updating package lists and installing dependencies"
    - apt-get update && apt-get install -y curl jq python3 python3-pip git || { echo "Error installing dependencies"; exit 1; }

    - echo "Downloading kubectl with retries"
    - |
      KUBECTL_RETRIES=3
      KUBECTL_DOWNLOAD_SUCCESS=false
      KUBECTL_VERSION="v1.28.0"
      for ((i=1; i<=KUBECTL_RETRIES; i++)); do
        echo "Download attempt $i of $KUBECTL_RETRIES..."
        if timeout 300 curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"; then
          echo "kubectl download succeeded on attempt $i."
          KUBECTL_DOWNLOAD_SUCCESS=true
          break
        else
          echo "kubectl download failed on attempt $i. Retrying..."
          sleep 10
        fi
      done
      if [ "$KUBECTL_DOWNLOAD_SUCCESS" = false ]; then
        echo "kubectl download failed after $KUBECTL_RETRIES attempts."
        exit 1
      fi

    - chmod +x kubectl
    - mv kubectl /usr/local/bin/kubectl || { echo "Error moving kubectl to /usr/local/bin"; exit 1; }

    - kubectl version --client || { echo "kubectl installation verification failed"; exit 1; }

    - echo "Installing Python dependencies"
    - pip3 install --no-cache-dir tabulate || { echo "Error installing Python dependencies"; exit 1; }

    - echo "Creating directory for kubeconfig files"
    - mkdir -p /tmp/kubeconfigs || { echo "Error creating kubeconfigs directory"; exit 1; }

    - echo "Checking and decoding kubeconfigs"
    - |
      for var in ftctl_pf01_kubeconfig ftctl_ps01_kubeconfig fttc_pdf01_kubeconfig fttc_pds01_kubeconfig fttc_tdf01_kubeconfig fttc_tds01_kubeconfig fttc_tf01_kubeconfig fttc_ts01_kubeconfig; do
        if [ -z "${!var}" ]; then
          echo "Error: $var is not set"
          exit 1
        else
          echo "${!var}" | base64 --decode > /tmp/kubeconfigs/${var##*_kubeconfig} || { echo "Error decoding $var"; exit 1; }
        fi
      done

    - echo "Securing kubeconfig files"
    - chmod 600 /tmp/kubeconfigs/* || { echo "Error securing kubeconfig files"; exit 1; }

    - echo "Verifying and merging kubeconfig files"
    - export KUBECONFIG=$(ls -1 /tmp/kubeconfigs/* | tr '\n' ':')
    - kubectl config view --flatten > /tmp/merged_kubeconfig || { echo "Error flattening kubeconfig"; exit 1; }
    - export KUBECONFIG=/tmp/merged_kubeconfig
    - kubectl config get-contexts || { echo "Error retrieving contexts"; exit 1; }

    - echo "Running cluster crawler"
    - ./scripts/cluster_crawler.sh || { echo "Cluster crawler script failed"; exit 1; }

    - echo "Cleaning up"
    - rm -rf /tmp/kubeconfigs /tmp/merged_kubeconfig
