collect_data:
  stage: build
  image: registry.cloud.fits/devops-services/toolchain/docker-go:v0.6.0
  timeout: 60m
  variables:
    GIT_SSL_NO_VERIFY: "true"
  script:
    - echo "Displaying OS information"
    - cat /etc/os-release || lsb_release -a || uname -a

    - echo "Updating package lists and installing dependencies"
    - apt-get update && apt-get install -y curl jq python3 python3-pip git wget || { echo "Error installing dependencies"; exit 1; }

    - echo "Installing yq"
    - wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.35.1/yq_linux_amd64 && chmod +x /usr/local/bin/yq || { echo "Error installing yq"; exit 1; }

    - |
      KUBECTL_RETRIES=5
      KUBECTL_DOWNLOAD_SUCCESS=false
      KUBECTL_VERSION="v1.28.0"
      KUBECTL_EXPECTED_SIZE=49836544

      for ((i=1; i<=KUBECTL_RETRIES; i++)); do
        echo "Download attempt $i of $KUBECTL_RETRIES..."
        if timeout 300 curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"; then
          if [ $(stat -c%s "kubectl") -ge $KUBECTL_EXPECTED_SIZE ]; then
            echo "kubectl download succeeded on attempt $i and verified file size."
            KUBECTL_DOWNLOAD_SUCCESS=true
            break
          else
            echo "kubectl download incomplete (wrong file size), retrying..."
            rm -f kubectl
          fi
        else
          echo "kubectl download failed on attempt $i. Retrying..."
          sleep 10
        fi
      done

      if [ "$KUBECTL_DOWNLOAD_SUCCESS" = false ]; then
        echo "kubectl download failed after $KUBECTL_RETRIES attempts."
        exit 1
      fi

    - chmod +x kubectl
    - mv kubectl /usr/local/bin/kubectl || { echo "Error moving kubectl to /usr/local/bin"; exit 1; }

    - kubectl version --client || { echo "kubectl installation verification failed"; exit 1; }

    - echo "Installing Python dependencies"
    - pip3 install --no-cache-dir tabulate || { echo "Error installing Python dependencies"; exit 1; }

    - echo "Creating directory for kubeconfig files"
    - mkdir -p /tmp/kubeconfigs || { echo "Error creating kubeconfigs directory"; exit 1; }

    - echo "Writing kubeconfig variables to files"
    - |
      declare -a KUBECONFIG_NAMES=("fttc_tdf01" "fttc_tds01" "fttc_tf01" "fttc_ts01")
      for name in "${KUBECONFIG_NAMES[@]}"; do
        var_name="${name}_kubeconfig"
        kubeconfig_content="${!var_name}"
        if [ -z "$kubeconfig_content" ]; then
          echo "Error: Kubeconfig variable $var_name is empty"
          exit 1
        fi
        echo "$kubeconfig_content" | base64 --decode > "/tmp/kubeconfigs/${name}_kubeconfig" || { echo "Error decoding kubeconfig $name"; exit 1; }
      done

    - echo "Securing kubeconfig files"
    - chmod 600 /tmp/kubeconfigs/* || { echo "Error securing kubeconfig files"; exit 1; }

    - echo "Verifying kubeconfig files exist"
    - |
      for file in /tmp/kubeconfigs/*; do
        if [ ! -f "$file" ]; then
          echo "Error: $file does not exist"
          exit 1
        else
          echo "Verified existence of $file"
        fi
      done

    - echo "Ensuring scripts are executable"
    - chmod +x scripts/cluster_crawler.sh
    - chmod +x scripts/parser.py

    - echo "Running cluster crawler script"
    - ./scripts/cluster_crawler.sh -dl || { echo "Cluster crawler script failed"; exit 1; }

    - echo "Cleaning up temporary files"
    - rm -rf /tmp/kubeconfigs || { echo "Error cleaning kubeconfigs"; exit 1; }
    - rm -f /tmp/merged_kubeconfig || { echo "Error cleaning merged kubeconfig"; exit 1; }

  artifacts:
    paths:
      - scripts/info_cache_*
    expire_in: 1 week

