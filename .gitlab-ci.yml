collect_data:
  stage: build
  image: registry.cloud.fits/devops-services/toolchain/docker-go:v0.6.0
  variables:
    GIT_SSL_NO_VERIFY: "true"
  script:
    # Display OS information
    - cat /etc/os-release || lsb_release -a || uname -a

    # Update package lists and install dependencies
    - apt-get update && apt-get install -y curl jq python3 python3-pip git

    # Install kubectl
    - KUBECTL_VERSION="v1.28.0"
    - curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/kubectl
    - kubectl version --client

    # Install Python dependencies
    - pip3 install --no-cache-dir tabulate

    # Create a temporary directory for kubeconfig files
    - mkdir -p /tmp/kubeconfigs

    # Check if kubeconfig variables are set
    - for var in FTCTL_PF01_KUBECONFIG FTCTL_PS01_KUBECONFIG FTTC_PDF01_KUBECONFIG FTTC_PDS01_KUBECONFIG FTTC_TDF01_KUBECONFIG FTTC_TDS01_KUBECONFIG FTTC_TF01_KUBECONFIG FTTC_TS01_KUBECONFIG; do
        echo "Checking if $var is set";
        if [ -z "${!var}" ]; then
          echo "Variable $var is NOT set or is empty";
        else
          echo "Variable $var is set";
        fi
      done

    # Write each kubeconfig variable to a file (assuming base64-encoded)
    - echo "$FTCTL_PF01_KUBECONFIG" | base64 --decode > /tmp/kubeconfigs/ftctl_pf01_kubeconfig
    - echo "$FTCTL_PS01_KUBECONFIG" | base64 --decode > /tmp/kubeconfigs/ftctl_ps01_kubeconfig
    - echo "$FTTC_PDF01_KUBECONFIG" | base64 --decode > /tmp/kubeconfigs/fttc_pdf01_kubeconfig
    - echo "$FTTC_PDS01_KUBECONFIG" | base64 --decode > /tmp/kubeconfigs/fttc_pds01_kubeconfig
    - echo "$FTTC_TDF01_KUBECONFIG" | base64 --decode > /tmp/kubeconfigs/fttc_tdf01_kubeconfig
    - echo "$FTTC_TDS01_KUBECONFIG" | base64 --decode > /tmp/kubeconfigs/fttc_tds01_kubeconfig
    - echo "$FTTC_TF01_KUBECONFIG"   | base64 --decode > /tmp/kubeconfigs/fttc_tf01_kubeconfig
    - echo "$FTTC_TS01_KUBECONFIG"   | base64 --decode > /tmp/kubeconfigs/fttc_ts01_kubeconfig

    # Secure the kubeconfig files
    - chmod 600 /tmp/kubeconfigs/*

    # Verify the contents of kubeconfig files
    - for file in /tmp/kubeconfigs/*; do
        echo "Contents of $file:";
        cat "$file" | head -n 5;
      done

    # Merge the kubeconfig files
    - export KUBECONFIG=$(ls -1 /tmp/kubeconfigs/* | tr '\n' ':')
    - kubectl config view --flatten > /tmp/merged_kubeconfig

    # Use the merged kubeconfig
    - export KUBECONFIG=/tmp/merged_kubeconfig

    # Verify the contexts in the merged kubeconfig
    - echo "Available contexts in merged kubeconfig:"
    - kubectl config get-contexts

    # Ensure scripts are executable
    - chmod +x scripts/cluster_crawler.sh
    - chmod +x scripts/parser.py

    # Run the cluster crawler script
    - ./scripts/cluster_crawler.sh

    # Clean up temporary files
    - rm -rf /tmp/kubeconfigs
    - rm -f /tmp/merged_kubeconfig
