collect_data:
  stage: build
  image: appcore-k8s-builder:2.6.0
  timeout: 60m
  variables:
    GIT_SSL_NO_VERIFY: "true"
  script:
    # Update package lists and install dependencies
    - echo "Updating package lists and installing dependencies"
    - apk update && apk add --no-cache curl jq git wget bash ca-certificates openssl

    # Install yq (YAML processor)
    - echo "Installing yq"
    - wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.35.1/yq_linux_amd64 \
      && chmod +x /usr/local/bin/yq || { echo "Error installing yq"; exit 1; }

    # Install kubectl
    - echo "Installing kubectl"
    - curl -LO "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl" \
      && chmod +x kubectl \
      && mv kubectl /usr/local/bin/ || { echo "Error installing kubectl"; exit 1; }

    # Verify kubectl installation
    - kubectl version --client || { echo "kubectl installation verification failed"; exit 1; }

    # Install Python dependencies
    - echo "Installing Python dependencies"
    - pip install --no-cache-dir tabulate || { echo "Error installing Python dependencies"; exit 1; }

    # Create a temporary directory for kubeconfig files
    - echo "Creating directory for kubeconfig files"
    - mkdir -p /tmp/kubeconfigs || { echo "Error creating kubeconfigs directory"; exit 1; }

    # Write each kubeconfig variable to a file
    - echo "Writing kubeconfig variables to files"
    - |
      # List of kubeconfig variable names
      kubeconfig_variables=("fttc_tdf01_kubeconfig" "fttc_tds01_kubeconfig" "fttc_tf01_kubeconfig" "fttc_ts01_kubeconfig")

      for var_name in "${kubeconfig_variables[@]}"; do
        echo "Processing kubeconfig for cluster [REDACTED]"

        # Access the variable content
        kubeconfig_content="${!var_name}"

        # Check if the variable is set
        if [ -z "$kubeconfig_content" ]; then
          echo "Error: Kubeconfig variable is empty or not set"
          exit 1
        fi

        # Write the kubeconfig content to a file
        cluster_name="${var_name%_kubeconfig}"
        echo "$kubeconfig_content" > "/tmp/kubeconfigs/${cluster_name}_kubeconfig" || { echo "Error writing kubeconfig for $cluster_name"; exit 1; }

        # Secure the kubeconfig file
        chmod 600 "/tmp/kubeconfigs/${cluster_name}_kubeconfig" || { echo "Error setting permissions on kubeconfig for $cluster_name"; exit 1; }
      done

    # Ensure scripts are executable
    - echo "Ensuring scripts are executable"
    - chmod +x scripts/cluster_crawler.sh
    - chmod +x scripts/parser.py

    # Run the cluster crawler script
    - echo "Running cluster crawler script"
    - ./scripts/cluster_crawler.sh -dl || { echo "Cluster crawler script failed"; exit 1; }

    # Clean up temporary files
    - echo "Cleaning up temporary files"
    - rm -rf /tmp/kubeconfigs || { echo "Error cleaning kubeconfigs"; exit 1; }
    - rm -f /tmp/merged_kubeconfig || { echo "Error cleaning merged kubeconfig"; exit 1; }

  artifacts:
    paths:
      - scripts/info_cache_*
    expire_in: 1 week
