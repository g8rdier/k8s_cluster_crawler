image: registry.cloud.fits/devops-services/toolchain/docker-go:v0.6.0

stages:
  - validate
  - build
  - deploy

# Überprüfen des Shell-Skripts
lint:
  stage: validate
  allow_failure: true
  variables:
    SHELLCHECK_OPTS: ""
  script:
    - shellcheck scripts/cluster_crawler.sh

# Schritt 1: Kubernetes-Daten sammeln
collect_data:
  stage: build
  script:
    # kubectl installieren
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/kubectl
    - kubectl version --client  

    # jq installieren
    - curl -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
    - chmod +x ./jq
    - mv jq /usr/local/bin/jq
    - jq --version 

    - mkdir -p ~/.kube #.kube Verzeichnis
    - echo "$KUBE_CONFIG_DATA" | base64 -d > ~/.kube/config  # Kubernetes-Konfigurationsdatei aus den CI-Variablen laden
    - chmod 600 ~/.kube/config  # Berechtigungen für die Kubernetes-Konfigurationsdatei setzen
    - kubectl config view  # Überprüfen, ob die Kubernetes-Konfigurationsdatei korrekt ist
    - chmod +x scripts/cluster_crawler.sh  # Skript ausführbar machen
    - ./scripts/cluster_crawler.sh  # Datensammelskript ausführen

# Schritt 2: Daten in das Docs-Repository deployen
deploy_data:
  stage: deploy
  script:
    # Git-Konfiguration mit CI-Anmeldeinformationen
    - git config --global user.name "GitLab CI"
    - git config --global user.email "ci@example.com"

    # Verwenden des Deploy Tokens aus den CI/CD-Variablen für HTTPS-Authentifizierung
    - git remote set-url origin "https://${PUSH_BOM_PAGES}@gitlab.com/devops-services/toolchain/docs.git"

    # Kopiere die Dateien aus dem Output-Verzeichnis des Skripts in die entsprechenden Pfade des Docs-Repos
    - mkdir -p boms/k8s/ingress
    - mkdir -p boms/k8s/pods
    - cp -r info_cache_*/ingress.json boms/k8s/ingress/
    - cp -r info_cache_*/pods.json boms/k8s/pods/

    # Füge die Änderungen zu Git hinzu, erstelle einen Commit und pushe die Änderungen in das Docs-Repo
    - git add boms/k8s/ingress boms/k8s/pods
    - git commit -m "Automatisches Update der Cluster-Daten am $(date)"
    - git push origin main  # Passe den Branch bei Bedarf an
