collect_data:
  stage: build
  image: registry.cloud.fits/fits/appcore-k8s-builder:2.8.1
  timeout: 60m
  variables:
    GIT_SSL_NO_VERIFY: "true"
    no_proxy: github.com,objects.githubusercontent.com  # Disable proxy for GitHub-related domains
  script:
    # Verify if yq is installed
    - yq --version || echo "yq is not installed"

    # Install yq if not present
    - |
      if ! command -v yq &> /dev/null; then
        echo "Installing yq"
        wget -O /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/v4.35.1/yq_linux_amd64" \
          && chmod +x /usr/local/bin/yq || { echo "Error installing yq"; exit 1; }
      fi

    # Create a temporary directory for kubeconfig files
    - echo "Creating directory for kubeconfig files"
    - mkdir -p /tmp/kubeconfigs || { echo "Error creating kubeconfigs directory"; exit 1; }

    # Debugging kubeconfig variable
    - |
      echo "Debugging kubeconfig variables:"

      # Check size of each variable
      if [ -n "$fttc_tdf01_kubeconfig" ]; then
        echo "fttc_tdf01_kubeconfig size: ${#fttc_tdf01_kubeconfig}"
      else
        echo "Error: fttc_tdf01_kubeconfig is empty or not set"
        exit 1
      fi

      if [ -n "$fttc_tds01_kubeconfig" ]; then
        echo "fttc_tds01_kubeconfig size: ${#fttc_tds01_kubeconfig}"
      else
        echo "Error: fttc_tds01_kubeconfig is empty or not set"
        exit 1
      fi

      if [ -n "$fttc_tf01_kubeconfig" ]; then
        echo "fttc_tf01_kubeconfig size: ${#fttc_tf01_kubeconfig}"
      else
        echo "Error: fttc_tf01_kubeconfig is empty or not set"
        exit 1
      fi

      if [ -n "$fttc_ts01_kubeconfig" ]; then
        echo "fttc_ts01_kubeconfig size: ${#fttc_ts01_kubeconfig}"
      else
        echo "Error: fttc_ts01_kubeconfig is empty or not set"
        exit 1
      fi

    # Write and decode kubeconfig content
    - |
      echo "Decoding and writing kubeconfig variables to files"
      echo "$fttc_tdf01_kubeconfig" | base64 --decode > /tmp/kubeconfigs/fttc_tdf01_kubeconfig || { echo "Error decoding fttc_tdf01_kubeconfig"; exit 1; }
      echo "$fttc_tds01_kubeconfig" | base64 --decode > /tmp/kubeconfigs/fttc_tds01_kubeconfig || { echo "Error decoding fttc_tds01_kubeconfig"; exit 1; }
      echo "$fttc_tf01_kubeconfig" | base64 --decode > /tmp/kubeconfigs/fttc_tf01_kubeconfig || { echo "Error decoding fttc_tf01_kubeconfig"; exit 1; }
      echo "$fttc_ts01_kubeconfig" | base64 --decode > /tmp/kubeconfigs/fttc_ts01_kubeconfig || { echo "Error decoding fttc_ts01_kubeconfig"; exit 1; }

    # Ensure scripts are executable
    - echo "Ensuring scripts are executable"
    - chmod +x scripts/cluster_crawler.sh
    - chmod +x scripts/parser.py

    # Run your scripts
    - echo "Running cluster crawler script"
    - ./scripts/cluster_crawler.sh -dl || { echo "Cluster crawler script failed"; exit 1; }

    # Clean up temporary files
    - echo "Cleaning up temporary files"
    - rm -rf /tmp/kubeconfigs || { echo "Error cleaning kubeconfigs"; exit 1; }
    - rm -f /tmp/merged_kubeconfig || { echo "Error cleaning merged kubeconfig"; exit 1; }

  artifacts:
    paths:
      - scripts/info_cache_*
    expire_in: 1 week
